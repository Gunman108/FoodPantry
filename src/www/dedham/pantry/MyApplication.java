package www.dedham.pantry;


import static com.codename1.ui.CN.*;

import com.codename1.components.FloatingActionButton;
import com.codename1.components.MultiButton;
import com.codename1.ui.*;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.mig.Grid;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;


import com.codename1.ui.layouts.BoxLayout;

import java.util.ArrayList;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class MyApplication {

    ArrayList<data> Products = new ArrayList<data>();
    public String myproduct = "Carrot";
    public int myamount = 40;
    public int namt = 10;
    public String edit = "Carrot";
    public String delete = "Carrot";
    private Form current;
    private Resources theme;
    private Label username, password, productname, productname2, amountname, amountname2, product, amount;
    private TextField txtUser, txtPass, txtProduct, txtAmount, txtNumber;
    private Button go, productadd, infoadd, clear, subtract, create, undo, back, export, viewlist, viewlist2, addproduct, addproduct2;
    private MultiButton deleteb;
    private Container panela, panelb, panelc, lpanelf, lpanela, lpanelb, apanelf, apanela, apanelb, epanelf, epanela, epanelb, epanelc, epaneld;

    public ArrayList<String> widgets = new ArrayList<String>();
    public ArrayList<String> products = new ArrayList<String>();
    public ArrayList<SwipeableContainer> conts = new ArrayList<SwipeableContainer>();


    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
//        if(current != null){
//            current.show();
//            return;
//        }
        Form first = new Form("Pantry Wise", BoxLayout.y());
        Form list = new Form("Product List", BoxLayout.y());
        Form adder = new Form("Add Product", BoxLayout.y());
        adder.setScrollableY(true);
        Form info = new Form("Product Edit", BoxLayout.y());

        //First Containers
        panela = new Container();
        panelb = new Container();
        panelc = new Container();

        //Product List Containers
        lpanelf = new Container();
        lpanela = new Container();
        lpanelb = new Container();

        products.add("filler");
        products.add("filler");
        products.add("filler");
        products.add("filler");

        //Add Product Containers
        apanelf = new Container();
        apanela = new Container();
        apanelb = new Container();

        //Product Edit Containers
        epanelf = new Container();
        epanela = new Container();
        epanelb = new Container();
        epanelc = new Container();
        epaneld = new Container();


        //LABELS
        username = new Label("Username: ");
        password = new Label("Password: ");
        productname = new Label("Product Name: ");
        amountname = new Label("Amount: ");
        productname2 = new Label("PRODUCT NAME: ");
        amountname2 = new Label("AMOUNT: ");
        product = new Label("PRODUCT");
//        product.getSelectedStyle().setAlignment(CENTER);
        amount = new Label("AMOUNT");
//        amount.getSelectedStyle().setAlignment(CENTER);

        //TEXT FIELDS
        txtUser = new TextField("");
        txtPass = new TextField("");
        txtAmount = new TextField("");
        txtProduct = new TextField("");
        txtNumber = new TextField("");
//        txtNumber.getStyle().setAlignment(Component.CENTER);

        //BUTTONS
        go = new Button("GO");
        productadd = new Button("ADD");
        clear = new Button("CLEAR");
        viewlist = new Button("VIEW LIST");
        addproduct = new Button("ADD PRODUCT");
        viewlist2 = new Button("VIEW LIST");
        addproduct2 = new Button("ADD PRODUCT");
        back = new Button("BACK");
        infoadd = new Button("ADD");
        subtract = new Button("SUBTRACT");
        create = new Button("NEW");
        undo = new Button("UNDO");
        deleteb = new MultiButton("DELETE");


        //LAYOUTS
        first.setLayout(new GridLayout(5, 1));
        panelb.setLayout(new GridLayout(2, 2));
        panela.setLayout(new GridLayout(2, 2));
        panelc.setLayout(new GridLayout(1, 1));

        list.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        lpanelf.setLayout(new GridLayout(2, 2));
        lpanela.setLayout(new GridLayout(1, 2));
        lpanelb.setLayout(new GridLayout(3, 2));
        lpanelb.setScrollableY(true);

        adder.setLayout(new GridLayout(3, 1));
        apanelf.setLayout(new GridLayout(3, 2));
        apanela.setLayout(new GridLayout(4, 2));
        apanelb.setLayout(new GridLayout(2, 2));

        info.setLayout(new GridLayout(3, 1));
        epanelf.setLayout(new GridLayout(2, 3));
        epanela.setLayout(new GridLayout(2, 2));
        epanelb.setLayout(new GridLayout(2, 3));
        epanelc.setLayout(new GridLayout(2, 3));


        //ADDING TO CONTAINERS
        panela.add(username);
        panela.add(txtUser);
        panela.add(password);
        panela.add(txtPass);
        panelc.add(go);

        lpanelf.add(viewlist2); //These need to be smaller
        lpanelf.add(addproduct2);
        lpanelf.add(product);
        lpanelf.add(amount);
        lpanelb.add("Carrot");
        lpanelb.add("10");
        lpanelb.add("Apple");
        lpanelb.add("40");
        lpanelb.add("Filler");
        lpanelb.add("Filler");


//        for(int i=0; i<=Products.size();i++){
////            pull();
//            lpanelb.add((Products.get(i).x));
//            lpanelb.add(String.valueOf(Products.get(i).y));
//            push((Products.get(i).x),String.valueOf(Products.get(i).y));
//        }

        FloatingActionButton export = FloatingActionButton.createBadge("EXPORT");

        export.bindFabToContainer(list.getContentPane());
        //How to place a button over this

        apanelf.add(viewlist); //These need to be smaller
        apanelf.add(addproduct);
        apanela.add(productname);
        apanela.add(txtProduct);
        apanela.add(amountname);
        apanela.add(txtAmount);
        apanelb.add(productadd); //These need to be smaller
        apanelb.add(clear);

        epanelf.add(back);
        epanela.add(productname2);
        epanela.add("filler");
        epanela.add(amountname2);
        epanela.add("filler");
        epanelb.add(" ");
        epanelb.add(" ");
        epanelb.add(" ");
        epanelb.add(" ");
        epanelb.add(txtNumber); //Lower down and change size
        epanelc.add(infoadd);
        epanelc.add(subtract);
        epanelc.add(create);
        epanelc.add("");
        epanelc.add(undo);

        //ADDING TO FORMS
        first.addComponent(panelb);
        first.addComponent(panela);
        first.addComponent(panelc);

        list.add(lpanelf);



        list.add(createWidget("Banana","20")).

                add(createWidget("Apple","30")).

                add(createWidget("Juice","40"));

        list.addComponent(lpanelb);



        adder.addComponent(apanelf);
        adder.addComponent(apanela);
        adder.addComponent(apanelb);


        info.addComponent(epanelf);
        info.addComponent(epanela);
        info.addComponent(epanelb);
        info.addComponent(epanelc);

        //Initial Screen Shower
        list.show();

        //Code for Screen Switching Buttons
        go.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                list.show();
            }
        });

        viewlist.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                list.show();
            }
        });

        viewlist2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                list.show();
            }
        });

        back.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                list.show();
            }
        });

        addproduct.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                adder.show();
            }
        });
        addproduct2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                adder.show();
            }
        });

        //Code for textfields and create Button


        create.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                data temppair = new data(txtProduct.getText(), Integer.parseInt(txtAmount.getText()));

                System.out.println(txtProduct.getText());
                System.out.println(txtAmount.getText());
                Products.add(temppair);
                System.out.println(Products);
            }
        });


        //Code for add and subtract Button

//        add.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent actionEvent) {
//                data temppair = new data(txtProduct.getText(),Integer.parseInt(txtAmount.getText()));
//
//                System.out.println(txtProduct.getText());
//                System.out.println(txtAmount.getText());
//                Products.add(temppair);
//                System.out.println(Products);
//            }
//        });

        //        sub.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent actionEvent) {
//                data temppair = new data(txtProduct.getText(),Integer.parseInt(txtAmount.getText()));
//
//                System.out.println(txtProduct.getText());
//                System.out.println(txtAmount.getText());
//                Products.add(temppair);
//                System.out.println(Products);
//            }
//        });

        //Code for delete button

        deleteb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String tempdel = widgets.get(0);
                delete(tempdel);
            }
        });


    }


    public SwipeableContainer createWidget(String product, String amount) {

        MultiButton button = new MultiButton(product);
        button.setLayout(new GridLayout(1,2));
        button.add(amount);
        return new SwipeableContainer(new Button("Filler"),button);

    }



    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    public void push(String myproduct, String myamount){
        try {
            URL url = new URL("https://www.hales.ma1geek.org/gunner.php/?product=" + myproduct + "&amount=" + myamount);
            System.out.println();

            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(url.openStream()));
            String line;

//            while ((line = reader.readLine()) != null) {
//            }
            reader.close();
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
            }


    public void pull(){
        try {
            URL url = new URL("https://www.hales.ma1geek.org/gunner.php");
            System.out.println();

            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(url.openStream()));
            String line;

            while ((line = reader.readLine()) != null) {
                System.out.println(line);
                if (line.contains("Product")) {
                    int index1 = line.indexOf("Product") + 6;
                    for (int i = index1; i < line.length(); i++) {

                    }
                }

            }
            reader.close();
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }

    public void delete(String d){
        try {
            URL url = new URL("https://www.hales.ma1geek.org/gunner.php/?delete=" + d);
            System.out.println();

            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(url.openStream()));
            String line;

//            while ((line = reader.readLine()) != null) {
//            }
            reader.close();
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }
    public void edit(){
        try {
            URL url = new URL("https://www.hales.ma1geek.org/gunner.php/?namt=" + namt + "&edit=" + edit);
            System.out.println();

            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(url.openStream()));
            String line;

//            while ((line = reader.readLine()) != null) {
//            }
            reader.close();
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }

}